// SPDX-License-Identifier: MIT
pragma solidity ^0.7.0;

// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and
// ./interfaces/KeeperCompatibleInterface.sol
import "@chainlink/contracts/src/v0.7/KeeperCompatible.sol";

contract PlantLottoTracker is KeeperCompatibleInterface {
    /**
    * Public counter variable
    */
    uint public lotteryWinners;
    uint public daysOfPlantGrowth;
    uint public weeksOfPlantGrowth;
    


    /**
    * Use an interval in seconds and a timestamp to slow execution of Upkeep
    */
    uint public immutable interval;
    uint public lastTimeStamp;

    constructor(uint updateInterval) {
      interval = updateInterval;
      lastTimeStamp = block.timestamp;

      lotteryWinners = 14;
      weeksOfPlantGrowth = 16;
      daysOfPlantGrowth = 112;
    }

    function checkUpkeep(bytes calldata /* checkData */) external override returns (bool upkeepNeeded, bytes memory /* performData */) {
        upkeepNeeded = (block.timestamp - lastTimeStamp) > interval;
        // We don't use the checkData in this example. The checkData is defined when the Upkeep was registered.
    }

    function performUpkeep(bytes calldata /* performData */) external override {
        lastTimeStamp = block.timestamp;
        lotteryWinners = lotteryWinners + 1;
        weeksOfPlantGrowth = weeksOfPlantGrowth + 1;
        daysOfPlantGrowth = daysOfPlantGrowth + 7;
        // We don't use the performData in this example. The performData is generated by the Keeper's call to your checkUpkeep function
    }
}